/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubcategoryService } from "../subcategory.service";
import { SubcategoryCreateInput } from "./SubcategoryCreateInput";
import { Subcategory } from "./Subcategory";
import { SubcategoryFindManyArgs } from "./SubcategoryFindManyArgs";
import { SubcategoryWhereUniqueInput } from "./SubcategoryWhereUniqueInput";
import { SubcategoryUpdateInput } from "./SubcategoryUpdateInput";
import { SubSubcategoryFindManyArgs } from "../../subSubcategory/base/SubSubcategoryFindManyArgs";
import { SubSubcategory } from "../../subSubcategory/base/SubSubcategory";
import { SubSubcategoryWhereUniqueInput } from "../../subSubcategory/base/SubSubcategoryWhereUniqueInput";
import { PlaceFindManyArgs } from "../../place/base/PlaceFindManyArgs";
import { Place } from "../../place/base/Place";
import { PlaceWhereUniqueInput } from "../../place/base/PlaceWhereUniqueInput";

export class SubcategoryControllerBase {
  constructor(protected readonly service: SubcategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Subcategory })
  async createSubcategory(
    @common.Body() data: SubcategoryCreateInput
  ): Promise<Subcategory> {
    return await this.service.createSubcategory({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        category: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Subcategory] })
  @ApiNestedQuery(SubcategoryFindManyArgs)
  async subcategories(@common.Req() request: Request): Promise<Subcategory[]> {
    const args = plainToClass(SubcategoryFindManyArgs, request.query);
    return this.service.subcategories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        category: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Subcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subcategory(
    @common.Param() params: SubcategoryWhereUniqueInput
  ): Promise<Subcategory | null> {
    const result = await this.service.subcategory({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        category: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Subcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubcategory(
    @common.Param() params: SubcategoryWhereUniqueInput,
    @common.Body() data: SubcategoryUpdateInput
  ): Promise<Subcategory | null> {
    try {
      return await this.service.updateSubcategory({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,

          category: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Subcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubcategory(
    @common.Param() params: SubcategoryWhereUniqueInput
  ): Promise<Subcategory | null> {
    try {
      return await this.service.deleteSubcategory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,

          category: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/subSubcategories")
  @ApiNestedQuery(SubSubcategoryFindManyArgs)
  async findSubSubcategories(
    @common.Req() request: Request,
    @common.Param() params: SubcategoryWhereUniqueInput
  ): Promise<SubSubcategory[]> {
    const query = plainToClass(SubSubcategoryFindManyArgs, request.query);
    const results = await this.service.findSubSubcategories(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        subcategory: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subSubcategories")
  async connectSubSubcategories(
    @common.Param() params: SubcategoryWhereUniqueInput,
    @common.Body() body: SubSubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subSubcategories: {
        connect: body,
      },
    };
    await this.service.updateSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subSubcategories")
  async updateSubSubcategories(
    @common.Param() params: SubcategoryWhereUniqueInput,
    @common.Body() body: SubSubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subSubcategories: {
        set: body,
      },
    };
    await this.service.updateSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subSubcategories")
  async disconnectSubSubcategories(
    @common.Param() params: SubcategoryWhereUniqueInput,
    @common.Body() body: SubSubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subSubcategories: {
        disconnect: body,
      },
    };
    await this.service.updateSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/places")
  @ApiNestedQuery(PlaceFindManyArgs)
  async findPlaces(
    @common.Req() request: Request,
    @common.Param() params: SubcategoryWhereUniqueInput
  ): Promise<Place[]> {
    const query = plainToClass(PlaceFindManyArgs, request.query);
    const results = await this.service.findPlaces(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        location: true,
        typeField: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        subSubcategory: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/places")
  async connectPlaces(
    @common.Param() params: SubcategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        connect: body,
      },
    };
    await this.service.updateSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/places")
  async updatePlaces(
    @common.Param() params: SubcategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        set: body,
      },
    };
    await this.service.updateSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/places")
  async disconnectPlaces(
    @common.Param() params: SubcategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        disconnect: body,
      },
    };
    await this.service.updateSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
