/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SearchInput as PrismaSearchInput } from "@prisma/client";

export class SearchInputServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SearchInputCountArgs, "select">
  ): Promise<number> {
    return this.prisma.searchInput.count(args);
  }

  async searchInputs(
    args: Prisma.SearchInputFindManyArgs
  ): Promise<PrismaSearchInput[]> {
    return this.prisma.searchInput.findMany(args);
  }
  async searchInput(
    args: Prisma.SearchInputFindUniqueArgs
  ): Promise<PrismaSearchInput | null> {
    return this.prisma.searchInput.findUnique(args);
  }
  async createSearchInput(
    args: Prisma.SearchInputCreateArgs
  ): Promise<PrismaSearchInput> {
    return this.prisma.searchInput.create(args);
  }
  async updateSearchInput(
    args: Prisma.SearchInputUpdateArgs
  ): Promise<PrismaSearchInput> {
    return this.prisma.searchInput.update(args);
  }
  async deleteSearchInput(
    args: Prisma.SearchInputDeleteArgs
  ): Promise<PrismaSearchInput> {
    return this.prisma.searchInput.delete(args);
  }
}
