/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SearchInputService } from "../searchInput.service";
import { SearchInputCreateInput } from "./SearchInputCreateInput";
import { SearchInput } from "./SearchInput";
import { SearchInputFindManyArgs } from "./SearchInputFindManyArgs";
import { SearchInputWhereUniqueInput } from "./SearchInputWhereUniqueInput";
import { SearchInputUpdateInput } from "./SearchInputUpdateInput";

export class SearchInputControllerBase {
  constructor(protected readonly service: SearchInputService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SearchInput })
  async createSearchInput(
    @common.Body() data: SearchInputCreateInput
  ): Promise<SearchInput> {
    return await this.service.createSearchInput({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filters: true,
        query: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SearchInput] })
  @ApiNestedQuery(SearchInputFindManyArgs)
  async searchInputs(@common.Req() request: Request): Promise<SearchInput[]> {
    const args = plainToClass(SearchInputFindManyArgs, request.query);
    return this.service.searchInputs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filters: true,
        query: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SearchInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async searchInput(
    @common.Param() params: SearchInputWhereUniqueInput
  ): Promise<SearchInput | null> {
    const result = await this.service.searchInput({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        filters: true,
        query: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SearchInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSearchInput(
    @common.Param() params: SearchInputWhereUniqueInput,
    @common.Body() data: SearchInputUpdateInput
  ): Promise<SearchInput | null> {
    try {
      return await this.service.updateSearchInput({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          filters: true,
          query: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SearchInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSearchInput(
    @common.Param() params: SearchInputWhereUniqueInput
  ): Promise<SearchInput | null> {
    try {
      return await this.service.deleteSearchInput({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          filters: true,
          query: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
