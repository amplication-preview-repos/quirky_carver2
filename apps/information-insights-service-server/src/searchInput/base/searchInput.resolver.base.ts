/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SearchInput } from "./SearchInput";
import { SearchInputCountArgs } from "./SearchInputCountArgs";
import { SearchInputFindManyArgs } from "./SearchInputFindManyArgs";
import { SearchInputFindUniqueArgs } from "./SearchInputFindUniqueArgs";
import { CreateSearchInputArgs } from "./CreateSearchInputArgs";
import { UpdateSearchInputArgs } from "./UpdateSearchInputArgs";
import { DeleteSearchInputArgs } from "./DeleteSearchInputArgs";
import { SearchInputService } from "../searchInput.service";
@graphql.Resolver(() => SearchInput)
export class SearchInputResolverBase {
  constructor(protected readonly service: SearchInputService) {}

  async _searchInputsMeta(
    @graphql.Args() args: SearchInputCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SearchInput])
  async searchInputs(
    @graphql.Args() args: SearchInputFindManyArgs
  ): Promise<SearchInput[]> {
    return this.service.searchInputs(args);
  }

  @graphql.Query(() => SearchInput, { nullable: true })
  async searchInput(
    @graphql.Args() args: SearchInputFindUniqueArgs
  ): Promise<SearchInput | null> {
    const result = await this.service.searchInput(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SearchInput)
  async createSearchInput(
    @graphql.Args() args: CreateSearchInputArgs
  ): Promise<SearchInput> {
    return await this.service.createSearchInput({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SearchInput)
  async updateSearchInput(
    @graphql.Args() args: UpdateSearchInputArgs
  ): Promise<SearchInput | null> {
    try {
      return await this.service.updateSearchInput({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SearchInput)
  async deleteSearchInput(
    @graphql.Args() args: DeleteSearchInputArgs
  ): Promise<SearchInput | null> {
    try {
      return await this.service.deleteSearchInput(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
