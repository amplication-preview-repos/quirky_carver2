/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SubSubcategory as PrismaSubSubcategory,
  Place as PrismaPlace,
  Subcategory as PrismaSubcategory,
} from "@prisma/client";

export class SubSubcategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubSubcategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subSubcategory.count(args);
  }

  async subSubcategories(
    args: Prisma.SubSubcategoryFindManyArgs
  ): Promise<PrismaSubSubcategory[]> {
    return this.prisma.subSubcategory.findMany(args);
  }
  async subSubcategory(
    args: Prisma.SubSubcategoryFindUniqueArgs
  ): Promise<PrismaSubSubcategory | null> {
    return this.prisma.subSubcategory.findUnique(args);
  }
  async createSubSubcategory(
    args: Prisma.SubSubcategoryCreateArgs
  ): Promise<PrismaSubSubcategory> {
    return this.prisma.subSubcategory.create(args);
  }
  async updateSubSubcategory(
    args: Prisma.SubSubcategoryUpdateArgs
  ): Promise<PrismaSubSubcategory> {
    return this.prisma.subSubcategory.update(args);
  }
  async deleteSubSubcategory(
    args: Prisma.SubSubcategoryDeleteArgs
  ): Promise<PrismaSubSubcategory> {
    return this.prisma.subSubcategory.delete(args);
  }

  async findPlaces(
    parentId: string,
    args: Prisma.PlaceFindManyArgs
  ): Promise<PrismaPlace[]> {
    return this.prisma.subSubcategory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .places(args);
  }

  async getSubcategory(parentId: string): Promise<PrismaSubcategory | null> {
    return this.prisma.subSubcategory
      .findUnique({
        where: { id: parentId },
      })
      .subcategory();
  }
}
