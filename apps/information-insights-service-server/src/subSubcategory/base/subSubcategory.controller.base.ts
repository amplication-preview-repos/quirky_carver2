/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubSubcategoryService } from "../subSubcategory.service";
import { SubSubcategoryCreateInput } from "./SubSubcategoryCreateInput";
import { SubSubcategory } from "./SubSubcategory";
import { SubSubcategoryFindManyArgs } from "./SubSubcategoryFindManyArgs";
import { SubSubcategoryWhereUniqueInput } from "./SubSubcategoryWhereUniqueInput";
import { SubSubcategoryUpdateInput } from "./SubSubcategoryUpdateInput";
import { PlaceFindManyArgs } from "../../place/base/PlaceFindManyArgs";
import { Place } from "../../place/base/Place";
import { PlaceWhereUniqueInput } from "../../place/base/PlaceWhereUniqueInput";

export class SubSubcategoryControllerBase {
  constructor(protected readonly service: SubSubcategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubSubcategory })
  async createSubSubcategory(
    @common.Body() data: SubSubcategoryCreateInput
  ): Promise<SubSubcategory> {
    return await this.service.createSubSubcategory({
      data: {
        ...data,

        subcategory: data.subcategory
          ? {
              connect: data.subcategory,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        subcategory: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubSubcategory] })
  @ApiNestedQuery(SubSubcategoryFindManyArgs)
  async subSubcategories(
    @common.Req() request: Request
  ): Promise<SubSubcategory[]> {
    const args = plainToClass(SubSubcategoryFindManyArgs, request.query);
    return this.service.subSubcategories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        subcategory: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubSubcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subSubcategory(
    @common.Param() params: SubSubcategoryWhereUniqueInput
  ): Promise<SubSubcategory | null> {
    const result = await this.service.subSubcategory({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        subcategory: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubSubcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubSubcategory(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() data: SubSubcategoryUpdateInput
  ): Promise<SubSubcategory | null> {
    try {
      return await this.service.updateSubSubcategory({
        where: params,
        data: {
          ...data,

          subcategory: data.subcategory
            ? {
                connect: data.subcategory,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,

          subcategory: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubSubcategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubSubcategory(
    @common.Param() params: SubSubcategoryWhereUniqueInput
  ): Promise<SubSubcategory | null> {
    try {
      return await this.service.deleteSubSubcategory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,

          subcategory: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/places")
  @ApiNestedQuery(PlaceFindManyArgs)
  async findPlaces(
    @common.Req() request: Request,
    @common.Param() params: SubSubcategoryWhereUniqueInput
  ): Promise<Place[]> {
    const query = plainToClass(PlaceFindManyArgs, request.query);
    const results = await this.service.findPlaces(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        location: true,
        typeField: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        subSubcategory: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/places")
  async connectPlaces(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        connect: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/places")
  async updatePlaces(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        set: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/places")
  async disconnectPlaces(
    @common.Param() params: SubSubcategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        disconnect: body,
      },
    };
    await this.service.updateSubSubcategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
