/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CategoryService } from "../category.service";
import { CategoryCreateInput } from "./CategoryCreateInput";
import { Category } from "./Category";
import { CategoryFindManyArgs } from "./CategoryFindManyArgs";
import { CategoryWhereUniqueInput } from "./CategoryWhereUniqueInput";
import { CategoryUpdateInput } from "./CategoryUpdateInput";
import { SubcategoryFindManyArgs } from "../../subcategory/base/SubcategoryFindManyArgs";
import { Subcategory } from "../../subcategory/base/Subcategory";
import { SubcategoryWhereUniqueInput } from "../../subcategory/base/SubcategoryWhereUniqueInput";
import { PlaceFindManyArgs } from "../../place/base/PlaceFindManyArgs";
import { Place } from "../../place/base/Place";
import { PlaceWhereUniqueInput } from "../../place/base/PlaceWhereUniqueInput";

export class CategoryControllerBase {
  constructor(protected readonly service: CategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Category })
  async createCategory(
    @common.Body() data: CategoryCreateInput
  ): Promise<Category> {
    return await this.service.createCategory({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Category] })
  @ApiNestedQuery(CategoryFindManyArgs)
  async categories(@common.Req() request: Request): Promise<Category[]> {
    const args = plainToClass(CategoryFindManyArgs, request.query);
    return this.service.categories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async category(
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Category | null> {
    const result = await this.service.category({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCategory(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() data: CategoryUpdateInput
  ): Promise<Category | null> {
    try {
      return await this.service.updateCategory({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCategory(
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Category | null> {
    try {
      return await this.service.deleteCategory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/subcategories")
  @ApiNestedQuery(SubcategoryFindManyArgs)
  async findSubcategories(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Subcategory[]> {
    const query = plainToClass(SubcategoryFindManyArgs, request.query);
    const results = await this.service.findSubcategories(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,

        category: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subcategories")
  async connectSubcategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: SubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subcategories: {
        connect: body,
      },
    };
    await this.service.updateCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subcategories")
  async updateSubcategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: SubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subcategories: {
        set: body,
      },
    };
    await this.service.updateCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subcategories")
  async disconnectSubcategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: SubcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subcategories: {
        disconnect: body,
      },
    };
    await this.service.updateCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/places")
  @ApiNestedQuery(PlaceFindManyArgs)
  async findPlaces(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Place[]> {
    const query = plainToClass(PlaceFindManyArgs, request.query);
    const results = await this.service.findPlaces(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        location: true,
        typeField: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        subSubcategory: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/places")
  async connectPlaces(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        connect: body,
      },
    };
    await this.service.updateCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/places")
  async updatePlaces(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        set: body,
      },
    };
    await this.service.updateCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/places")
  async disconnectPlaces(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: PlaceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      places: {
        disconnect: body,
      },
    };
    await this.service.updateCategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
