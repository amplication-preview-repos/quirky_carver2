/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlaceService } from "../place.service";
import { PlaceCreateInput } from "./PlaceCreateInput";
import { Place } from "./Place";
import { PlaceFindManyArgs } from "./PlaceFindManyArgs";
import { PlaceWhereUniqueInput } from "./PlaceWhereUniqueInput";
import { PlaceUpdateInput } from "./PlaceUpdateInput";
import { RecommendationFindManyArgs } from "../../recommendation/base/RecommendationFindManyArgs";
import { Recommendation } from "../../recommendation/base/Recommendation";
import { RecommendationWhereUniqueInput } from "../../recommendation/base/RecommendationWhereUniqueInput";

export class PlaceControllerBase {
  constructor(protected readonly service: PlaceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Place })
  async createPlace(@common.Body() data: PlaceCreateInput): Promise<Place> {
    return await this.service.createPlace({
      data: {
        ...data,

        subcategory: data.subcategory
          ? {
              connect: data.subcategory,
            }
          : undefined,

        subSubcategory: data.subSubcategory
          ? {
              connect: data.subSubcategory,
            }
          : undefined,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        location: true,
        typeField: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        subSubcategory: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Place] })
  @ApiNestedQuery(PlaceFindManyArgs)
  async places(@common.Req() request: Request): Promise<Place[]> {
    const args = plainToClass(PlaceFindManyArgs, request.query);
    return this.service.places({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        location: true,
        typeField: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        subSubcategory: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Place })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async place(
    @common.Param() params: PlaceWhereUniqueInput
  ): Promise<Place | null> {
    const result = await this.service.place({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        location: true,
        typeField: true,

        subcategory: {
          select: {
            id: true,
          },
        },

        subSubcategory: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Place })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlace(
    @common.Param() params: PlaceWhereUniqueInput,
    @common.Body() data: PlaceUpdateInput
  ): Promise<Place | null> {
    try {
      return await this.service.updatePlace({
        where: params,
        data: {
          ...data,

          subcategory: data.subcategory
            ? {
                connect: data.subcategory,
              }
            : undefined,

          subSubcategory: data.subSubcategory
            ? {
                connect: data.subSubcategory,
              }
            : undefined,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          location: true,
          typeField: true,

          subcategory: {
            select: {
              id: true,
            },
          },

          subSubcategory: {
            select: {
              id: true,
            },
          },

          category: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Place })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlace(
    @common.Param() params: PlaceWhereUniqueInput
  ): Promise<Place | null> {
    try {
      return await this.service.deletePlace({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          location: true,
          typeField: true,

          subcategory: {
            select: {
              id: true,
            },
          },

          subSubcategory: {
            select: {
              id: true,
            },
          },

          category: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/recommendations")
  @ApiNestedQuery(RecommendationFindManyArgs)
  async findRecommendations(
    @common.Req() request: Request,
    @common.Param() params: PlaceWhereUniqueInput
  ): Promise<Recommendation[]> {
    const query = plainToClass(RecommendationFindManyArgs, request.query);
    const results = await this.service.findRecommendations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        details: true,

        place: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recommendations")
  async connectRecommendations(
    @common.Param() params: PlaceWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        connect: body,
      },
    };
    await this.service.updatePlace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recommendations")
  async updateRecommendations(
    @common.Param() params: PlaceWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        set: body,
      },
    };
    await this.service.updatePlace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recommendations")
  async disconnectRecommendations(
    @common.Param() params: PlaceWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        disconnect: body,
      },
    };
    await this.service.updatePlace({
      where: params,
      data,
      select: { id: true },
    });
  }
}
