/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  MaxLength,
  IsOptional,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EnumPlaceTypeField } from "./EnumPlaceTypeField";
import { Subcategory } from "../../subcategory/base/Subcategory";
import { SubSubcategory } from "../../subSubcategory/base/SubSubcategory";
import { Category } from "../../category/base/Category";
import { Recommendation } from "../../recommendation/base/Recommendation";

@ObjectType()
class Place {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  location!: JsonValue;

  @ApiProperty({
    required: false,
    enum: EnumPlaceTypeField,
  })
  @IsEnum(EnumPlaceTypeField)
  @IsOptional()
  @Field(() => EnumPlaceTypeField, {
    nullable: true,
  })
  typeField?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => Subcategory,
  })
  @ValidateNested()
  @Type(() => Subcategory)
  @IsOptional()
  subcategory?: Subcategory | null;

  @ApiProperty({
    required: false,
    type: () => SubSubcategory,
  })
  @ValidateNested()
  @Type(() => SubSubcategory)
  @IsOptional()
  subSubcategory?: SubSubcategory | null;

  @ApiProperty({
    required: false,
    type: () => Category,
  })
  @ValidateNested()
  @Type(() => Category)
  @IsOptional()
  category?: Category | null;

  @ApiProperty({
    required: false,
    type: () => [Recommendation],
  })
  @ValidateNested()
  @Type(() => Recommendation)
  @IsOptional()
  recommendations?: Array<Recommendation>;
}

export { Place as Place };
