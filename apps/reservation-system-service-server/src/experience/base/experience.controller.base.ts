/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExperienceService } from "../experience.service";
import { ExperienceCreateInput } from "./ExperienceCreateInput";
import { Experience } from "./Experience";
import { ExperienceFindManyArgs } from "./ExperienceFindManyArgs";
import { ExperienceWhereUniqueInput } from "./ExperienceWhereUniqueInput";
import { ExperienceUpdateInput } from "./ExperienceUpdateInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";

export class ExperienceControllerBase {
  constructor(protected readonly service: ExperienceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Experience })
  async createExperience(
    @common.Body() data: ExperienceCreateInput
  ): Promise<Experience> {
    return await this.service.createExperience({
      data: {
        ...data,

        guide: data.guide
          ? {
              connect: data.guide,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        duration: true,
        price: true,
        pricingRule: true,
        description: true,

        guide: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Experience] })
  @ApiNestedQuery(ExperienceFindManyArgs)
  async experiences(@common.Req() request: Request): Promise<Experience[]> {
    const args = plainToClass(ExperienceFindManyArgs, request.query);
    return this.service.experiences({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        duration: true,
        price: true,
        pricingRule: true,
        description: true,

        guide: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Experience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async experience(
    @common.Param() params: ExperienceWhereUniqueInput
  ): Promise<Experience | null> {
    const result = await this.service.experience({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        duration: true,
        price: true,
        pricingRule: true,
        description: true,

        guide: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Experience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExperience(
    @common.Param() params: ExperienceWhereUniqueInput,
    @common.Body() data: ExperienceUpdateInput
  ): Promise<Experience | null> {
    try {
      return await this.service.updateExperience({
        where: params,
        data: {
          ...data,

          guide: data.guide
            ? {
                connect: data.guide,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          duration: true,
          price: true,
          pricingRule: true,
          description: true,

          guide: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Experience })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExperience(
    @common.Param() params: ExperienceWhereUniqueInput
  ): Promise<Experience | null> {
    try {
      return await this.service.deleteExperience({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          duration: true,
          price: true,
          pricingRule: true,
          description: true,

          guide: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: ExperienceWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        date: true,
        duration: true,
        status: true,
        confirmedByGuide: true,
        user: true,

        experience: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: ExperienceWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateExperience({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: ExperienceWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateExperience({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: ExperienceWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateExperience({
      where: params,
      data,
      select: { id: true },
    });
  }
}
